{"ast":null,"code":"import { put, takeEvery, call } from 'redux-saga/effects';\nimport actionTypes from '../actionTypes';\nexport function* fetchEmployeeAsync(action) {\n  try {\n    let queryStr = action.query;\n    let whereStr = JSON.stringify(action.filters);\n    let employeeName = null,\n        EmployeeNumber = null,\n        DateJoined = null,\n        Extension = null,\n        RoleName = null;\n    console.log(\"action=\" + JSON.stringify(action));\n\n    try {\n      EmployeeNumber = action.filters.employeeName;\n    } catch (error) {}\n\n    console.log(\"employeeName=\" + employeeName);\n\n    try {\n      EmployeeNumber = action.filters.EmployeeNumber;\n    } catch (error) {}\n\n    console.log(\"EmployeeNumber=\" + EmployeeNumber);\n\n    try {\n      DateJoined = action.filters.DateJoined;\n    } catch (error) {}\n\n    console.log(\"DateJoined=\" + DateJoined);\n\n    try {\n      Extension = action.filters.Extension;\n    } catch (error) {}\n\n    console.log(\"Extension=\" + Extension);\n\n    try {\n      RoleName = action.filters.RoleName;\n    } catch (error) {}\n\n    let filters = action.filters;\n\n    if (!!filters) {\n      whereStr = Object.keys(filters).forEach(key => whereStr = whereStr + \"&\" + key + \"=\" + filters[key]);\n      whereStr = whereStr.substr(1, whereStr.length - 1);\n    }\n\n    console.log(whereStr);\n\n    if (queryStr === '') {\n      if (!!whereStr) {\n        queryStr = '?where=' + whereStr;\n      } else {\n        queryStr = '';\n      }\n    } else {\n      if (!!whereStr) {\n        queryStr = '&where=' + whereStr;\n      }\n    }\n\n    console.log('http://localhost:5000/api/v1/employees' + queryStr);\n    const response = yield call(fetch, 'http://localhost:5000/api/v1/employees' + queryStr); //const data = response.json();\n\n    const employees = yield call([response, 'json']); //console.log(JSON.stringify(employees));\n\n    if (!!employees) {\n      yield put({\n        type: actionTypes.FEATCH_EMPLOYEES_OK,\n        employees: employees\n      });\n    } //return data[0].usernameName;\n\n  } catch (e) {\n    console.log(e); //return null;\n  }\n}\nexport function* fetchRoleAsync() {\n  try {\n    const response = yield call(fetch, 'http://localhost:5000/api/v1/roles');\n    const roles = yield call([response, 'json']);\n\n    if (!!roles) {\n      yield put({\n        type: actionTypes.FEATCH_ROLES_OK,\n        roles: roles\n      });\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport function* watchInitLoad() {\n  yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchEmployeeAsync);\n  yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchRoleAsync);\n}","map":{"version":3,"sources":["E:\\Ipedge\\frontend\\src\\sagas\\initLoadSaga.js"],"names":["put","takeEvery","call","actionTypes","fetchEmployeeAsync","action","queryStr","query","whereStr","JSON","stringify","filters","employeeName","EmployeeNumber","DateJoined","Extension","RoleName","console","log","error","Object","keys","forEach","key","substr","length","response","fetch","employees","type","FEATCH_EMPLOYEES_OK","e","fetchRoleAsync","roles","FEATCH_ROLES_OK","watchInitLoad"],"mappings":"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","sourcesContent":["import { put, takeEvery, call } from 'redux-saga/effects'\r\nimport actionTypes from '../actionTypes'\r\n\r\nexport function* fetchEmployeeAsync(action) {\r\n    try {\r\n        let queryStr = action.query;\r\n\r\n        let whereStr = JSON.stringify(action.filters);\r\n\r\n        let employeeName = null,\r\n            EmployeeNumber = null,\r\n            DateJoined = null,\r\n            Extension = null,\r\n            RoleName = null;\r\n\r\n        console.log(\"action=\" + JSON.stringify(action))\r\n        try {\r\n            EmployeeNumber = action.filters.employeeName;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"employeeName=\" + employeeName);\r\n        try {\r\n            EmployeeNumber = action.filters.EmployeeNumber;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"EmployeeNumber=\" + EmployeeNumber);\r\n        try {\r\n            DateJoined = action.filters.DateJoined;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"DateJoined=\" + DateJoined);\r\n        try {\r\n            Extension = action.filters.Extension;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"Extension=\" + Extension);\r\n        try {\r\n            RoleName = action.filters.RoleName;\r\n        } catch (error) {\r\n        }\r\n\r\n        let filters = action.filters;\r\n        if (!!filters) {\r\n            whereStr = Object.keys(filters).forEach(key => (whereStr=whereStr+\"&\" + key + \"=\" + filters[key]));\r\n            whereStr = whereStr.substr(1, whereStr.length-1);\r\n        }\r\n        \r\n\r\n        console.log(whereStr)\r\n        if (queryStr === '') {\r\n            if(!!whereStr) {\r\n                queryStr = '?where='+whereStr;\r\n            } else {\r\n                queryStr = ''\r\n            }\r\n        } else {\r\n            if(!!whereStr) {\r\n                queryStr = '&where='+whereStr;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        console.log('http://localhost:5000/api/v1/employees' + queryStr);\r\n        const response = yield call(fetch, 'http://localhost:5000/api/v1/employees' + queryStr);\r\n        //const data = response.json();\r\n        const employees = yield call([response, 'json']);\r\n        //console.log(JSON.stringify(employees));\r\n        if (!!employees) {\r\n            yield put({ type: actionTypes.FEATCH_EMPLOYEES_OK, employees: employees });\r\n        }\r\n        //return data[0].usernameName;\r\n    } catch (e) {\r\n        console.log(e);\r\n        //return null;\r\n    }\r\n}\r\n\r\nexport function* fetchRoleAsync() {\r\n    try {\r\n        const response = yield call(fetch, 'http://localhost:5000/api/v1/roles');\r\n        const roles = yield call([response, 'json']);\r\n        if (!!roles) {\r\n            yield put({ type: actionTypes.FEATCH_ROLES_OK, roles: roles });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* watchInitLoad() {\r\n    yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchEmployeeAsync);\r\n    yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchRoleAsync);\r\n}"]},"metadata":{},"sourceType":"module"}