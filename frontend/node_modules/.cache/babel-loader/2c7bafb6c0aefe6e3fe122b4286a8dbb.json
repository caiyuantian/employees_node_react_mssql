{"ast":null,"code":"import { put, takeEvery, call } from 'redux-saga/effects';\nimport actionTypes from '../actionTypes';\nimport config from '../config';\nexport function* fetchEmployeeAsync(action) {\n  try {\n    let queryStr = action.query;\n    let whereStr = '';\n    let filters = action.filters;\n\n    if (!!filters) {\n      Object.keys(filters).forEach(key => whereStr = whereStr + \"&\" + key + \"=\" + filters[key]);\n      whereStr = whereStr.substr(1, whereStr.length - 1);\n    } //console.log(whereStr)\n\n\n    if (queryStr === '') {\n      if (!!whereStr) {\n        queryStr = '?' + whereStr;\n      } else {\n        queryStr = '';\n      }\n    } else {\n      if (!!whereStr) {\n        queryStr = queryStr + '&' + whereStr;\n      }\n    } //console.log('http://localhost:5000/api/v1/employees' + queryStr);\n\n\n    const response = yield call(fetch, config.backendAddress + '/api/v1/employees' + queryStr); //const data = response.json();\n\n    const employees = yield call([response, 'json']); //console.log(JSON.stringify(employees));\n\n    if (!!employees) {\n      yield put({\n        type: actionTypes.FEATCH_EMPLOYEES_OK,\n        employees: employees\n      });\n    } //return data[0].usernameName;\n\n  } catch (e) {\n    console.log(e); //return null;\n  }\n}\nexport function* fetchRoleAsync() {\n  try {\n    const response = yield call(fetch, config.backendAddress + '/api/v1/roles');\n    const roles = yield call([response, 'json']);\n\n    if (!!roles) {\n      yield put({\n        type: actionTypes.FEATCH_ROLES_OK,\n        roles: roles\n      });\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport function* watchInitLoad() {\n  yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchEmployeeAsync); //yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchRoleAsync);\n}","map":{"version":3,"sources":["E:\\Ipedge\\frontend\\src\\sagas\\initLoadSaga.js"],"names":["put","takeEvery","call","actionTypes","config","fetchEmployeeAsync","action","queryStr","query","whereStr","filters","Object","keys","forEach","key","substr","length","response","fetch","backendAddress","employees","type","FEATCH_EMPLOYEES_OK","e","console","log","fetchRoleAsync","roles","FEATCH_ROLES_OK","watchInitLoad"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AACxC,MAAI;AACA,QAAIC,QAAQ,GAAGD,MAAM,CAACE,KAAtB;AAEA,QAAIC,QAAQ,GAAG,EAAf;AAEA,QAAIC,OAAO,GAAGJ,MAAM,CAACI,OAArB;;AACA,QAAI,CAAC,CAACA,OAAN,EAAe;AACXC,MAAAA,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6BC,GAAG,IAAKL,QAAQ,GAACA,QAAQ,GAAC,GAAT,GAAeK,GAAf,GAAqB,GAArB,GAA2BJ,OAAO,CAACI,GAAD,CAAhF;AACAL,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,MAAT,CAAgB,CAAhB,EAAmBN,QAAQ,CAACO,MAAT,GAAgB,CAAnC,CAAX;AACH,KATD,CAYA;;;AACA,QAAIT,QAAQ,KAAK,EAAjB,EAAqB;AACjB,UAAG,CAAC,CAACE,QAAL,EAAe;AACXF,QAAAA,QAAQ,GAAG,MAAIE,QAAf;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,GAAG,EAAX;AACH;AACJ,KAND,MAMO;AACH,UAAG,CAAC,CAACE,QAAL,EAAe;AACXF,QAAAA,QAAQ,GAAGA,QAAQ,GAAC,GAAT,GAAaE,QAAxB;AACH;AACJ,KAvBD,CAyBA;;;AACA,UAAMQ,QAAQ,GAAG,MAAMf,IAAI,CAACgB,KAAD,EAAQd,MAAM,CAACe,cAAP,GAAsB,mBAAtB,GAA4CZ,QAApD,CAA3B,CA1BA,CA2BA;;AACA,UAAMa,SAAS,GAAG,MAAMlB,IAAI,CAAC,CAACe,QAAD,EAAW,MAAX,CAAD,CAA5B,CA5BA,CA6BA;;AACA,QAAI,CAAC,CAACG,SAAN,EAAiB;AACb,YAAMpB,GAAG,CAAC;AAAEqB,QAAAA,IAAI,EAAElB,WAAW,CAACmB,mBAApB;AAAyCF,QAAAA,SAAS,EAAEA;AAApD,OAAD,CAAT;AACH,KAhCD,CAiCA;;AACH,GAlCD,CAkCE,OAAOG,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EADQ,CAER;AACH;AACJ;AAED,OAAO,UAAUG,cAAV,GAA2B;AAC9B,MAAI;AACA,UAAMT,QAAQ,GAAG,MAAMf,IAAI,CAACgB,KAAD,EAAQd,MAAM,CAACe,cAAP,GAAsB,eAA9B,CAA3B;AACA,UAAMQ,KAAK,GAAG,MAAMzB,IAAI,CAAC,CAACe,QAAD,EAAW,MAAX,CAAD,CAAxB;;AACA,QAAI,CAAC,CAACU,KAAN,EAAa;AACT,YAAM3B,GAAG,CAAC;AAAEqB,QAAAA,IAAI,EAAElB,WAAW,CAACyB,eAApB;AAAqCD,QAAAA,KAAK,EAAEA;AAA5C,OAAD,CAAT;AACH;AACJ,GAND,CAME,OAAOJ,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;AAED,OAAO,UAAUM,aAAV,GAA0B;AAC7B,QAAM5B,SAAS,CAAC,uBAAD,EAA0BI,kBAA1B,CAAf,CAD6B,CAE7B;AACH","sourcesContent":["import { put, takeEvery, call } from 'redux-saga/effects'\r\nimport actionTypes from '../actionTypes'\r\nimport config from '../config'\r\n\r\nexport function* fetchEmployeeAsync(action) {\r\n    try {\r\n        let queryStr = action.query;\r\n\r\n        let whereStr = '';\r\n\r\n        let filters = action.filters;\r\n        if (!!filters) {\r\n            Object.keys(filters).forEach(key => (whereStr=whereStr+\"&\" + key + \"=\" + filters[key]));\r\n            whereStr = whereStr.substr(1, whereStr.length-1);\r\n        }\r\n        \r\n\r\n        //console.log(whereStr)\r\n        if (queryStr === '') {\r\n            if(!!whereStr) {\r\n                queryStr = '?'+whereStr;\r\n            } else {\r\n                queryStr = ''\r\n            }\r\n        } else {\r\n            if(!!whereStr) {\r\n                queryStr = queryStr+'&'+whereStr;\r\n            }\r\n        }\r\n\r\n        //console.log('http://localhost:5000/api/v1/employees' + queryStr);\r\n        const response = yield call(fetch, config.backendAddress+'/api/v1/employees' + queryStr);\r\n        //const data = response.json();\r\n        const employees = yield call([response, 'json']);\r\n        //console.log(JSON.stringify(employees));\r\n        if (!!employees) {\r\n            yield put({ type: actionTypes.FEATCH_EMPLOYEES_OK, employees: employees });\r\n        }\r\n        //return data[0].usernameName;\r\n    } catch (e) {\r\n        console.log(e);\r\n        //return null;\r\n    }\r\n}\r\n\r\nexport function* fetchRoleAsync() {\r\n    try {\r\n        const response = yield call(fetch, config.backendAddress+'/api/v1/roles');\r\n        const roles = yield call([response, 'json']);\r\n        if (!!roles) {\r\n            yield put({ type: actionTypes.FEATCH_ROLES_OK, roles: roles });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* watchInitLoad() {\r\n    yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchEmployeeAsync);\r\n    //yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchRoleAsync);\r\n}"]},"metadata":{},"sourceType":"module"}