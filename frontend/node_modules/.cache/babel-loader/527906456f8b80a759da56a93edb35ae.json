{"ast":null,"code":"import { put, takeEvery, call } from 'redux-saga/effects';\nimport actionTypes from '../actionTypes';\nexport function* fetchEmployeeAsync(action) {\n  try {\n    let queryStr = action.query;\n    let filters = action.filters;\n    let whereStr = JSON.stringify(filters);\n    let employeeName = null,\n        EmployeeNumber = null,\n        DateJoined = null,\n        Extension = null,\n        RoleName = null;\n    console.log(\"action=\" + JSON.stringify(action));\n\n    try {\n      employeeName = action.filters.employeeName;\n    } catch (error) {}\n\n    console.log(\"employeeName=\" + employeeName);\n\n    try {\n      EmployeeNumber = action.filters.EmployeeNumber;\n    } catch (error) {}\n\n    console.log(\"EmployeeNumber=\" + EmployeeNumber);\n\n    try {\n      DateJoined = action.filters.DateJoined;\n    } catch (error) {}\n\n    console.log(\"DateJoined=\" + DateJoined);\n\n    try {\n      Extension = action.filters.Extension;\n    } catch (error) {}\n\n    console.log(\"Extension=\" + Extension);\n\n    try {\n      RoleName = action.filters.RoleName;\n    } catch (error) {}\n\n    console.log('http://localhost:5000/api/v1/employees' + queryStr);\n    const response = yield call(fetch, 'http://localhost:5000/api/v1/employees' + queryStr); //const data = response.json();\n\n    const employees = yield call([response, 'json']); //console.log(JSON.stringify(employees));\n\n    if (!!employees) {\n      yield put({\n        type: actionTypes.FEATCH_EMPLOYEES_OK,\n        employees: employees\n      });\n    } //return data[0].usernameName;\n\n  } catch (e) {\n    console.log(e); //return null;\n  }\n}\nexport function* fetchRoleAsync() {\n  try {\n    const response = yield call(fetch, 'http://localhost:5000/api/v1/roles');\n    const roles = yield call([response, 'json']);\n\n    if (!!roles) {\n      yield put({\n        type: actionTypes.FEATCH_ROLES_OK,\n        roles: roles\n      });\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport function* watchInitLoad() {\n  yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchEmployeeAsync);\n  yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchRoleAsync);\n}","map":{"version":3,"sources":["E:\\Ipedge\\frontend\\src\\sagas\\initLoadSaga.js"],"names":["put","takeEvery","call","actionTypes","fetchEmployeeAsync","action","queryStr","query","filters","whereStr","JSON","stringify","employeeName","EmployeeNumber","DateJoined","Extension","RoleName","console","log","error","response","fetch","employees","type","FEATCH_EMPLOYEES_OK","e","fetchRoleAsync","roles","FEATCH_ROLES_OK","watchInitLoad"],"mappings":"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","sourcesContent":["import { put, takeEvery, call } from 'redux-saga/effects'\r\nimport actionTypes from '../actionTypes'\r\n\r\nexport function* fetchEmployeeAsync(action) {\r\n    try {\r\n        let queryStr=action.query;\r\n        let filters = action.filters;\r\n        let whereStr = JSON.stringify(filters);\r\n\r\n        let employeeName = null,\r\n            EmployeeNumber = null,\r\n            DateJoined = null,\r\n            Extension = null,\r\n            RoleName = null;\r\n\r\n        console.log(\"action=\"+JSON.stringify(action))\r\n        try {\r\n            employeeName = action.filters.employeeName;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"employeeName=\"+employeeName);\r\n        try {\r\n            EmployeeNumber = action.filters.EmployeeNumber;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"EmployeeNumber=\"+EmployeeNumber);\r\n        try {\r\n            DateJoined = action.filters.DateJoined;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"DateJoined=\"+DateJoined);\r\n        try {\r\n            Extension = action.filters.Extension;\r\n        } catch (error) {\r\n        }\r\n        console.log(\"Extension=\"+Extension);\r\n        try {\r\n            RoleName = action.filters.RoleName;\r\n        } catch (error) {\r\n        }\r\n\r\n        console.log('http://localhost:5000/api/v1/employees'+queryStr);\r\n        const response = yield call(fetch, 'http://localhost:5000/api/v1/employees'+queryStr);\r\n        //const data = response.json();\r\n        const employees = yield call([response, 'json']);\r\n        //console.log(JSON.stringify(employees));\r\n        if (!!employees) {\r\n            yield put({ type: actionTypes.FEATCH_EMPLOYEES_OK, employees: employees});\r\n        }\r\n        //return data[0].usernameName;\r\n    } catch (e) {\r\n        console.log(e);\r\n        //return null;\r\n    }\r\n}\r\n\r\nexport function* fetchRoleAsync() {\r\n    try {\r\n        const response = yield call(fetch, 'http://localhost:5000/api/v1/roles');\r\n        const roles = yield call([response, 'json']);\r\n        if (!!roles) {\r\n            yield put({ type: actionTypes.FEATCH_ROLES_OK, roles: roles});\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* watchInitLoad() {\r\n    yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchEmployeeAsync);\r\n    yield takeEvery('FETCH_EMPLOYEES_ASYNC', fetchRoleAsync);\r\n}"]},"metadata":{},"sourceType":"module"}