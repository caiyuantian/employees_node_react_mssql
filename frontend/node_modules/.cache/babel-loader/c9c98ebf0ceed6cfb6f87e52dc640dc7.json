{"ast":null,"code":"import { put, takeEvery, call } from 'redux-saga/effects';\nimport actionTypes from '../actionTypes';\nexport function* fetchEmployeeForDisplayAsync(action) {\n  let EmployeeID = action.EmployeeID;\n\n  try {\n    //console.log('http://localhost:5000/api/v1/employee/'+EmployeeID);\n    const response = yield call(fetch, 'http://localhost:5000/api/v1/employee/' + EmployeeID);\n    const employee = yield call([response, 'json']);\n\n    if (!!employee) {\n      yield put({\n        type: actionTypes.FEATCH_EMPLOYEE_FOR_DISPLAY_OK,\n        employeeForDisplay: employee\n      });\n    } //return data[0].usernameName;\n\n  } catch (e) {\n    console.log(e); //return null;\n  }\n}\nexport function* watchDisplayEmployee() {\n  yield takeEvery(actionTypes.FETCH_EMPLOYEE_FOR_DISPLAY_ASYNC, fetchEmployeeForDisplayAsync);\n}","map":{"version":3,"sources":["E:\\Ipedge\\frontend\\src\\sagas\\displayEmployee.js"],"names":["put","takeEvery","call","actionTypes","fetchEmployeeForDisplayAsync","action","EmployeeID","response","fetch","employee","type","FEATCH_EMPLOYEE_FOR_DISPLAY_OK","employeeForDisplay","e","console","log","watchDisplayEmployee","FETCH_EMPLOYEE_FOR_DISPLAY_ASYNC"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAGA,OAAO,UAAUC,4BAAV,CAAuCC,MAAvC,EAA+C;AAClD,MAAIC,UAAU,GAAGD,MAAM,CAACC,UAAxB;;AACA,MAAI;AACA;AACA,UAAMC,QAAQ,GAAG,MAAML,IAAI,CAACM,KAAD,EAAQ,2CAAyCF,UAAjD,CAA3B;AACA,UAAMG,QAAQ,GAAG,MAAMP,IAAI,CAAC,CAACK,QAAD,EAAW,MAAX,CAAD,CAA3B;;AACA,QAAI,CAAC,CAACE,QAAN,EAAgB;AACZ,YAAMT,GAAG,CAAC;AAAEU,QAAAA,IAAI,EAAEP,WAAW,CAACQ,8BAApB;AAAoDC,QAAAA,kBAAkB,EAAEH;AAAxE,OAAD,CAAT;AACH,KAND,CAOA;;AACH,GARD,CAQE,OAAOI,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EADQ,CAER;AACH;AACJ;AAGD,OAAO,UAAUG,oBAAV,GAAiC;AACpC,QAAMf,SAAS,CAACE,WAAW,CAACc,gCAAb,EAA+Cb,4BAA/C,CAAf;AAEH","sourcesContent":["import { put, takeEvery, call } from 'redux-saga/effects'\r\nimport actionTypes from '../actionTypes'\r\n\r\n\r\nexport function* fetchEmployeeForDisplayAsync(action) {\r\n    let EmployeeID = action.EmployeeID;\r\n    try {\r\n        //console.log('http://localhost:5000/api/v1/employee/'+EmployeeID);\r\n        const response = yield call(fetch, 'http://localhost:5000/api/v1/employee/'+EmployeeID);\r\n        const employee = yield call([response, 'json']);\r\n        if (!!employee) {\r\n            yield put({ type: actionTypes.FEATCH_EMPLOYEE_FOR_DISPLAY_OK, employeeForDisplay: employee});\r\n        }\r\n        //return data[0].usernameName;\r\n    } catch (e) {\r\n        console.log(e);\r\n        //return null;\r\n    }\r\n}\r\n\r\n\r\nexport function* watchDisplayEmployee() {\r\n    yield takeEvery(actionTypes.FETCH_EMPLOYEE_FOR_DISPLAY_ASYNC, fetchEmployeeForDisplayAsync);\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}