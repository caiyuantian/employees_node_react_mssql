{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\redux_demo2\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { put, takeEvery, delay, all } from 'redux-saga/effects';\nimport store from './store';\n/*\nclass Counter extends React.Component {\n    render() {\n        let { value, onClickAdd, onClickSubstract } = this.props;\n        return (\n            <div>\n                <p>{value}</p>\n                <button onClick={onClickAdd}>加1</button>\n                <button onClick={onClickSubstract}>减1</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { value: state.value };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onClickAdd: () => dispatch({ type: \"CLICK_ADD_ASYNC\" }),\n        onClickSubstract: () => dispatch({ type: \"CLICK_SUBSTRACT_ASYNC\" })\n    }\n}\n\nconst Example = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Counter);\n\nconst myReducer = (state = { value: 0 }, action) => {\n    let value = state.value;\n    switch (action.type) {\n        case \"CLICK_ADD\":\n            return { ...state, value: value + 1 };\n        case \"CLICK_SUBSTRACT\":\n            return { ...state, value: value - 1 };\n        default:\n            return state;\n    }\n}\n\nfunction* substractAsync() {\n    yield delay(2000);\n    yield put({type: 'CLICK_SUBSTRACT'})\n}\n\nfunction* watchSubstractAsync() {\n    yield takeEvery('CLICK_SUBSTRACT_ASYNC', substractAsync);\n}\n\nfunction* addAsync() {\n    yield delay(2000);\n    yield put({ type: 'CLICK_ADD' })\n}\n\nfunction* watchAddAsync() {\n    yield takeEvery('CLICK_ADD_ASYNC', addAsync);\n}\n\nfunction* rootSaga() {\n    yield all([\n        watchAddAsync(),\n        watchSubstractAsync()\n    ]);\n}\n\nconst store = createrReducer();\nrunSaga()\n*/\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85\n  },\n  __self: this\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["E:\\projects\\redux_demo2\\src\\index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","connect","createStore","combineReducers","applyMiddleware","createSagaMiddleware","put","takeEvery","delay","all","store","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,aAAlC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,KAAzB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEAb,QAAQ,CAACc,MAAT,CACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAKD,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAGiBE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHjB,E,CAKA;AACA;AACA;;AACAd,aAAa,CAACe,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { put, takeEvery, delay, all } from 'redux-saga/effects'\nimport store from './store';\n\n/*\nclass Counter extends React.Component {\n    render() {\n        let { value, onClickAdd, onClickSubstract } = this.props;\n        return (\n            <div>\n                <p>{value}</p>\n                <button onClick={onClickAdd}>加1</button>\n                <button onClick={onClickSubstract}>减1</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { value: state.value };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onClickAdd: () => dispatch({ type: \"CLICK_ADD_ASYNC\" }),\n        onClickSubstract: () => dispatch({ type: \"CLICK_SUBSTRACT_ASYNC\" })\n    }\n}\n\nconst Example = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Counter);\n\nconst myReducer = (state = { value: 0 }, action) => {\n    let value = state.value;\n    switch (action.type) {\n        case \"CLICK_ADD\":\n            return { ...state, value: value + 1 };\n        case \"CLICK_SUBSTRACT\":\n            return { ...state, value: value - 1 };\n        default:\n            return state;\n    }\n}\n\nfunction* substractAsync() {\n    yield delay(2000);\n    yield put({type: 'CLICK_SUBSTRACT'})\n}\n\nfunction* watchSubstractAsync() {\n    yield takeEvery('CLICK_SUBSTRACT_ASYNC', substractAsync);\n}\n\nfunction* addAsync() {\n    yield delay(2000);\n    yield put({ type: 'CLICK_ADD' })\n}\n\nfunction* watchAddAsync() {\n    yield takeEvery('CLICK_ADD_ASYNC', addAsync);\n}\n\nfunction* rootSaga() {\n    yield all([\n        watchAddAsync(),\n        watchSubstractAsync()\n    ]);\n}\n\nconst store = createrReducer();\nrunSaga()\n*/\n\nReactDOM.render(\n    <Provider store = { store }>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}