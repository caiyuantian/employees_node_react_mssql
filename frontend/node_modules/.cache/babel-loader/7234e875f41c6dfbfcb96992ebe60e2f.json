{"ast":null,"code":"import _objectSpread from \"E:\\\\projects\\\\redux_demo2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport actionTypes from '../actionTypes';\nconst initialState = {\n  userInfo: {}\n};\n\nconst countryList = data => {\n  var lookup = {};\n  var items = data;\n  var result = [];\n\n  for (var item, i = 0; item = items[i++];) {\n    var country = item.address.country;\n\n    if (!(country in lookup)) {\n      lookup[country] = 1;\n      result.push(country);\n    }\n  }\n\n  return result;\n};\n\nconst cityList = data => {\n  var lookup = {};\n  var items = data;\n  var result = [];\n\n  for (var item, i = 0; item = items[i++];) {\n    var city = item.address.city;\n\n    if (!(city in lookup)) {\n      lookup[city] = 1;\n      result.push(city);\n    }\n  }\n\n  return result;\n};\n\nconst updateFilter = (filter = [], value) => {\n  if (typeof filter == 'undefined') {\n    filter = [];\n  }\n\n  let pos = filter.indexOf(value);\n\n  if (pos < 0) {\n    filter.push(value);\n  } else {\n    filter.splice(pos, 1);\n  }\n\n  return filter;\n};\n\nconst multiFilter = (data, filters) => {\n  const filterKeys = Object.keys(filters);\n  return data.filter(item => {\n    return filterKeys.every(key => {\n      if (!filters[key].length) return true;\n      return !!~filters[key].indexOf(item.address[key]);\n    });\n  });\n};\n\nconst dataReducer = (state = initialState, action) => {\n  let filters = state.filters,\n      data = state.data;\n  let filterResult = [];\n\n  switch (action.type) {\n    case actionTypes.FEATCH_USER_OK:\n      return _objectSpread({}, state, {\n        userInfo: action.user\n      });\n\n    case actionTypes.FEATCH_DATA_OK:\n      let countries1 = countryList(action.data);\n      let cities1 = cityList(action.data);\n      return _objectSpread({}, state, {\n        data: action.data,\n        countries: countries1,\n        cities: cities1\n      });\n\n    case actionTypes.CLICK_COUNTRY:\n      let countries = [];\n\n      try {\n        countries = filters.country;\n      } catch (e) {\n        console.log(\"no countries object yet\");\n      }\n\n      countries = updateFilter(countries, action.value);\n      filters = _objectSpread({}, filters, {\n        country: countries\n      });\n      filterResult = multiFilter(data, filters);\n      return _objectSpread({}, state, {\n        filters: filters,\n        filterResult: filterResult\n      });\n\n    case actionTypes.CLICK_CITY:\n      let cities = [];\n\n      try {\n        cities = filters.city;\n      } catch (e) {\n        console.log(\"no cities object yet\");\n      }\n\n      cities = updateFilter(cities, action.value);\n      filters = _objectSpread({}, filters, {\n        city: cities\n      });\n      console.log(data);\n      filterResult = multiFilter(data, filters);\n      return _objectSpread({}, state, {\n        filters: filters,\n        filterResult: filterResult\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;","map":{"version":3,"sources":["E:\\projects\\redux_demo2\\src\\reducers\\dataReducer.js"],"names":["actionTypes","initialState","userInfo","countryList","data","lookup","items","result","item","i","country","address","push","cityList","city","updateFilter","filter","value","pos","indexOf","splice","multiFilter","filters","filterKeys","Object","keys","every","key","length","dataReducer","state","action","filterResult","type","FEATCH_USER_OK","user","FEATCH_DATA_OK","countries1","cities1","countries","cities","CLICK_COUNTRY","e","console","log","CLICK_CITY"],"mappings":"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","sourcesContent":["import actionTypes from '../actionTypes'\r\n\r\nconst initialState = {\r\n    userInfo: {}\r\n}\r\n\r\nconst countryList = (data) => {\r\n    var lookup = {};\r\n    var items = data;\r\n    var result = [];\r\n\r\n    for (var item, i = 0; item = items[i++];) {\r\n        var country = item.address.country;\r\n\r\n        if (!(country in lookup)) {\r\n            lookup[country] = 1;\r\n            result.push(country);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nconst cityList = (data) => {\r\n    var lookup = {};\r\n    var items = data;\r\n    var result = [];\r\n\r\n    for (var item, i = 0; item = items[i++];) {\r\n        var city = item.address.city;\r\n\r\n        if (!(city in lookup)) {\r\n            lookup[city] = 1;\r\n            result.push(city);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nconst updateFilter = (filter = [], value) => {\r\n    if (typeof (filter) == 'undefined') {\r\n        filter = [];\r\n    }\r\n    let pos = filter.indexOf(value);\r\n    if (pos < 0) {\r\n        filter.push(value)\r\n    } else {\r\n        filter.splice(pos, 1)\r\n    }\r\n    return filter;\r\n}\r\n\r\nconst multiFilter = (data, filters) => {\r\n    const filterKeys = Object.keys(filters)\r\n    return data.filter((item) => {\r\n      return filterKeys.every(key => {\r\n        if(!filters[key].length) return true\r\n        return !!~filters[key].indexOf(item.address[key])\r\n      })\r\n    })\r\n  }\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n    let { filters, data } = state;\r\n    let filterResult = [];\r\n    switch (action.type) {\r\n        case actionTypes.FEATCH_USER_OK:\r\n            return { ...state, userInfo: action.user };\r\n        case actionTypes.FEATCH_DATA_OK:\r\n            let countries1 = countryList(action.data)\r\n            let cities1 = cityList(action.data)\r\n            return { ...state, data: action.data, countries: countries1, cities: cities1 };\r\n        case actionTypes.CLICK_COUNTRY:\r\n            let countries = [];\r\n            try {\r\n                countries = filters.country;\r\n            }\r\n            catch (e) {\r\n                console.log(\"no countries object yet\");\r\n            }\r\n            countries = updateFilter(countries, action.value);\r\n            filters = { ...filters, country: countries };\r\n            filterResult = multiFilter(data, filters);\r\n            return { ...state, filters: filters, filterResult: filterResult };\r\n\r\n        case actionTypes.CLICK_CITY:\r\n            let cities = [];\r\n            try {\r\n                cities = filters.city;\r\n            }\r\n            catch (e) {\r\n                console.log(\"no cities object yet\");\r\n            }\r\n            cities = updateFilter(cities, action.value);\r\n            filters = { ...filters, city: cities };\r\n            console.log(data);\r\n            filterResult = multiFilter(data, filters);\r\n            return { ...state, filters: filters, filterResult: filterResult };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dataReducer;"]},"metadata":{},"sourceType":"module"}