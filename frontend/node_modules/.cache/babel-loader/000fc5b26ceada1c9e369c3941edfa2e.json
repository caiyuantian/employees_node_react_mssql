{"ast":null,"code":"var _jsxFileName = \"E:\\\\Ipedge\\\\frontend\\\\src\\\\components\\\\employees.js\";\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { onChangeFilter, onChangePageSize, onDeleteEmployee } from '../actions';\nimport actionTypes from '../actionTypes';\nimport store from '../store';\nimport { ListEmployees } from './listEmployees';\n\nclass Employee extends React.Component {\n  componentDidMount() {\n    window.addEventListener('beforeunload', this.handleLeavePage);\n    store.dispatch({\n      type: actionTypes.FETCH_EMPLOYEES_ASYNC,\n      query: this.props.location.search,\n      filters: this.props.filters\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.handleLeavePage);\n  }\n\n  handleLeavePage() {\n    console.log(\"beforeunload:store.getState()=\" + JSON.stringify(store.getState()));\n    store.subscribe(() => {\n      const state = store.getState();\n      console.log(JSON.stringify(state));\n      saveState(state);\n    });\n  }\n\n  render() {\n    let _this$props = this.props,\n        employees = _this$props.employees,\n        pageInfo = _this$props.pageInfo,\n        onChangeFilter = _this$props.onChangeFilter,\n        onChangePageSize = _this$props.onChangePageSize,\n        onDeleteEmployee = _this$props.onDeleteEmployee,\n        filters = _this$props.filters;\n    let query = this.props.location.search; //let queryParams = querySearch(this.props.location.search);\n\n    function getParameter(search, paramName) {\n      var searchString = search.substring(1),\n          i,\n          val,\n          params = searchString.split(\"&\");\n\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n\n        if (val[0] === paramName) {\n          return val[1];\n        }\n      }\n\n      return null;\n    }\n\n    let locationPathname = this.props.location.pathname;\n    let orderby = getParameter(this.props.location.search, 'orderby'); //console.log(\"currentUrl\"+currentUrl)\n    //console.log(\"store.getState()=\"+JSON.stringify(store.getState()));\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(ListEmployees, {\n      employees: employees,\n      pageInfo: pageInfo,\n      onChangeFilter: onChangeFilter,\n      onChangePageSize: onChangePageSize,\n      onDeleteEmployee: onDeleteEmployee,\n      locationPathname: locationPathname,\n      orderby: orderby,\n      query: query,\n      filters: filters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction keySort(target) {\n  const newObj = {};\n\n  if (!!target) {\n    Object.keys(target).sort().map(key => newObj[key] = target[key]);\n  }\n\n  return newObj;\n} //console.log(JSON.stringify(keySort(a)) === JSON.stringify(keySort(b)))\n\n\nconst mapStateToProps = state => {\n  console.log(\"state=\" + JSON.stringify(state));\n  let employees = state.employees,\n      pageInfo = state.pageInfo,\n      filters = state.filters;\n  return {\n    employees: employees,\n    pageInfo: pageInfo,\n    filters: filters\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChangePageSize: bindActionCreators(onChangePageSize, dispatch),\n    onDeleteEmployee: bindActionCreators(onDeleteEmployee, dispatch),\n    onChangeFilter: bindActionCreators(onChangeFilter, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);","map":{"version":3,"sources":["E:\\Ipedge\\frontend\\src\\components\\employees.js"],"names":["React","bindActionCreators","connect","onChangeFilter","onChangePageSize","onDeleteEmployee","actionTypes","store","ListEmployees","Employee","Component","componentDidMount","window","addEventListener","handleLeavePage","dispatch","type","FETCH_EMPLOYEES_ASYNC","query","props","location","search","filters","componentWillUnmount","removeEventListener","console","log","JSON","stringify","getState","subscribe","state","saveState","render","employees","pageInfo","getParameter","paramName","searchString","substring","i","val","params","split","length","locationPathname","pathname","orderby","keySort","target","newObj","Object","keys","sort","map","key","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { onChangeFilter, onChangePageSize, onDeleteEmployee } from '../actions'\r\nimport actionTypes from '../actionTypes'\r\nimport store from '../store'\r\nimport { ListEmployees } from './listEmployees'\r\n\r\n\r\nclass Employee extends React.Component {\r\n    componentDidMount() {\r\n        window.addEventListener('beforeunload', this.handleLeavePage);\r\n        store.dispatch({ type: actionTypes.FETCH_EMPLOYEES_ASYNC, query: this.props.location.search, filters: this.props.filters });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.handleLeavePage);\r\n    }\r\n\r\n    handleLeavePage() {\r\n        console.log(\"beforeunload:store.getState()=\"+JSON.stringify(store.getState()));\r\n        store.subscribe(() => {\r\n            const state = store.getState();\r\n            console.log(JSON.stringify(state))\r\n            saveState(state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { employees, pageInfo, onChangeFilter, onChangePageSize, onDeleteEmployee, filters } = this.props;\r\n        let query = this.props.location.search;\r\n\r\n        //let queryParams = querySearch(this.props.location.search);\r\n        function getParameter(search, paramName) {\r\n            var searchString = search.substring(1),\r\n                i, val, params = searchString.split(\"&\");\r\n\r\n            for (i = 0; i < params.length; i++) {\r\n                val = params[i].split(\"=\");\r\n                if (val[0] === paramName) {\r\n                    return val[1];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        let locationPathname = this.props.location.pathname;\r\n        let orderby = getParameter(this.props.location.search, 'orderby');\r\n        //console.log(\"currentUrl\"+currentUrl)\r\n\r\n        //console.log(\"store.getState()=\"+JSON.stringify(store.getState()));\r\n\r\n        return (\r\n            <div>\r\n                <div id='left'>\r\n                    <ListEmployees employees={employees} pageInfo={pageInfo} onChangeFilter={onChangeFilter}\r\n                        onChangePageSize={onChangePageSize} onDeleteEmployee={onDeleteEmployee}\r\n                        locationPathname={locationPathname} orderby={orderby} query = {query} filters={filters} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction keySort(target) {\r\n    const newObj = {}\r\n    if (!!target) {\r\n        Object.keys(target).sort().map(key => newObj[key] = target[key])\r\n    }\r\n    return newObj\r\n}\r\n//console.log(JSON.stringify(keySort(a)) === JSON.stringify(keySort(b)))\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(\"state=\"+JSON.stringify(state))\r\n    let { employees, pageInfo, filters } = state;\r\n    return {\r\n        employees: employees, pageInfo: pageInfo, filters: filters\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangePageSize: bindActionCreators(onChangePageSize, dispatch),\r\n        onDeleteEmployee: bindActionCreators(onDeleteEmployee, dispatch),\r\n        onChangeFilter: bindActionCreators(onChangeFilter, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee)"]},"metadata":{},"sourceType":"module"}